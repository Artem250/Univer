#define _CRT_SECURE_NO_WARNINGS

#include <fstream>
#include <iostream>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>

#define enter printf("\n")

#define FF
#ifdef FF
typedef float real, realsum;
#define realout "%.7f "
#define realin "%f"
#endif

#ifdef DD
typedef double real, realsum;
#define realout "%.15f "
#define realin "%lf"

#endif

#ifdef FD
typedef float real;
typedef double realsum;
#define realout "%.7f "
#define realin "%f"
#endif



using namespace std;
//
////#define D_REAL
//#define D_REALSUM
//
//#ifdef D_REALSUM
//typedef double real_sum;
//#else
//typedef float real_sum;
//#endif
//
//#ifdef D_REAL
//typedef double real;
//#define realfmt_out "%.15lf"
//#define realfmt_in "%lf"
//#else
//typedef float real;
//#define realfmt_out "%.7f"
//#define realfmt_in "%f"
//#endif


//
//typedef double real;
//typedef double realsum;
////#define realsum double;  
//
//#define realin "%lf"
//
//#define realsum "%f" 
//#define EPS 1e-13

class matrix {
public:
   int n, m, k;
   real** al, ** au, ** A;
   //real** l, ** u;
   real* di, * b, * x, * y;
   real** mat;
   //matrix() {};


   void allocateMemory();
   void calcLU();
   void calcLUkonec();
   void calcLUr();
   void calcLUwA();
   void calcLUU();
   void input(FILE* inmat, FILE* invec);
   void output(FILE* res);
   void calcY(real** al, real* b, real* y, int n);
   void calcX(real** au, real* y, real* x, int n);
   void createGilbert(real** g, real* D, int n, int m);
   //void Gauss();
   void gauss();
   //void gausss();
   string check(real a);
};
/*

void matrix::calcLU() {

   for (int i = 0; i < n; i++) {
      real sumL = 0;
      real sumU = 0;
      real sumD = 0;
      for (int j = 0; j < i; j++) {



         for (int ki = 0; ki <= i - 1; ki++)
         {
            sumU += al[i][ki + m - i] * au[j][ki + m - j];
            //printf("%d sumU: %f %d %d\n", ki, sumU, i, j);
            printf("%d sumL: %f %d %d al: %f au: %f\n", ki, sumL, i, j, al[i][ki + m - j], au[j][ki + m - j]);

         }
         printf("%d %d sumU: %f \n\n", i, j, sumU);



         for (int kj = 0; kj <= j - 1; kj++)
         {
            sumL += al[i][kj + m - i] * au[j][kj + m - j];
            printf("%d sumL: %f %d %d al: %f au: %f\n", kj, sumL, i, j, al[i][kj + m - i], au[j][kj + m - j]);
         }

         printf("%d %d sumL: %f \n\n", i, j, sumL);


         au[i][j] = au[i][j + m - i] - sumU;
         al[j][i] = (al[j][i + m - j] - sumL) / di[j];
         //sumD += al[i][j] * au[k];
      }
   }

}
*/

void matrix::input(FILE* inmat, FILE* invec) {

   fscanf_s(inmat, "%d %d", &n, &m);
   //k = 10;
   allocateMemory();
   /*
   for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
         fscanf_s(inmat, realin, &al[i][j]);
      }
   }

   for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
         fscanf_s(inmat, realin, &au[i][j]);
      }
   }

   for (int i = 0; i < n; i++)
      fscanf_s(inmat, realin, &di[i]);
   */
   //printf("///B:\n");
   for (int i = 0; i < n; i++) {
      fscanf_s(invec, realin, &b[i]);
      //printf("%f\n", b[i]);
   }
   b[0] += pow(10.0, -k);
   printf("|------------------------------------------|" realout "\n", b[0]);
   //printf("B///:\n");


   ///*
   for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
         fscanf_s(inmat, realin, &mat[i][j]);
      }
   }
   mat[0][0] += pow(10.0, -k);
   printf("|-------------------------------------------|" realout "\n", mat[0][0]);
   //*/
   fclose(inmat);
   fclose(invec);

}
/*
void matrix::calcLU() {

   for (int i = 0; i < n; i++) {

      for (int j = 0; j < i; j++) {
         real sumL = 0;
         real sumU = 0;
         real sumD = 0;



         for (int kj = 0; kj <= j - 1; kj++)
         {
            sumL += al[i][kj + m - i] * au[j][kj + m - j];
            printf("%d sumL: %f %d %d al: %f au: %f\n", kj, sumL, i, j, al[i][kj + m - i], au[j][kj + m - j]);
         }

         printf("%d %d sumL: %f \n\n", i, j, sumL);




         al[i][j] = (al[j][i + m - j] - sumL) / di[j];


         //sumD += al[i][j] * au[k];
      }
   }

   printf("------------------------------------------\n");

   for (int i = 0; i < n; i++) {

      for (int j = i + 1; j < n; j++) {
         real sumL = 0;
         real sumU = 0;
         real sumD = 0;



         for (int ki = 0; ki <= i - 1; ki++)
         {
            sumU += al[i][ki + m - i] * au[j][ki + m - j];
            //printf("%d sumU: %f %d %d\n", ki, sumU, i, j);
            printf("%d sumU: %f %d %d al: %f au: %f\n", ki, sumU, i, j, al[i][ki + m - i], au[j][ki + m - j]);

         }
         printf("%d %d sumU: %f \n\n", i, j, sumU);

         au[i][j] = au[i][j + m - i] - sumU;


         //sumD += al[i][j] * au[k];
      }
   }

}*/
/*
void matrix::calcLUU() {
   for (int i = 0; i < n; i++) {
      // Вычисление диагонального элемента (вектор Di)
      real s_diag = 0;
      for (int k = 0; k < min(i, m); k++) {
         int j = i - k - 1;
         s_diag += al[i][k] * au[j][k];
      }
      di[i] = sqrt(di[i] - s_diag);

      // Вычисление элементов L (нижняя треугольная часть)
      for (int j = i + 1; j < min(i + m, n); j++) {
         real sumL = 0;
         for (int k = 0; k < min(i, m); k++) {
            int jj = i - k - 1;
            sumL += al[j][jj - j + m - 1] * au[i][k];
         }
         printf("sumL: %f %d %d\n", sumL, i, j);
         al[j][i - j + m - 1] = (al[j][i - j + m - 1] - sumL) / di[i];
      }

      // Вычисление элементов U (верхняя треугольная часть)
      for (int j = i + 1; j < min(i + m, n); j++) {
         real sumU = 0;
         for (int k = 0; k < min(i, m); k++) {
            int jj = i - k - 1;
            sumU += al[i][jj - i + m - 1] * au[j][jj - j + m - 1];
         }
         printf("sumU: %f %d %d\n", sumU, i, j);
         au[i][j - i - 1] = (au[i][j - i - 1] - sumU) / di[i];
      }
   }
}
*/



//
//void matrix::calcLUwA() {
//   A = new real * [n];
//
//   for (int i = 0; i < n; i++) {
//      A[i] = new real[m];
//      for (int j = 0; j < n; j++) {
//
//         if (i > m && j < i - m || j > m && i < j - m) {
//            A[i][j] = 0.0;
//            //continue;
//            printf("%f   ", A[i][j]);
//
//         }
//         //else {
//         if (j > i) {
//            A[i][j] = au[j][i + m - j];
//            au[j][i + m - j] = 0.0;
//         }
//         else {
//            A[i][j] = al[i][j + m - i];
//            al[i][j + m - i] = 0.0;
//         }
//         if (i == j) al[i][j] = 1.0;
//         A[i][i] = di[i];
//         //printf("A:\n");
//         printf("%f   ", A[i][j]);
//         //}
//      }
//      printf("\n");
//   }
//   printf("\nne A:\n");
//
//
//   for (int j = 0; j < n; j++) {
//      real sumU = 0;
//      real sumL = 0;
//      real sumD = 0;
//      for (int i = 0; i <= j; i++) {
//         au[i][j] = A[i][j];
//
//         for (int k = 0; k < i; k++) {
//            au[i][j] -= al[i][k] * au[k][j];
//         }
//         //au[i][j] -= sumU;
//         printf("U/// i: %d | j: %d | au[i][j]: %f | sumU: %f\n", i, j, au[i][j], sumU);
//
//      }
//      for (int i = j; i < n; i++) {
//         al[i][j] = A[i][j];
//         for (int k = 0; k < j; k++) {
//            al[i][j] -= al[i][k] * au[k][j];
//            if (i == j) sumD += al[i][k] * au[k][j];
//         }
//
//         al[i][j] /= au[j][j];
//         printf("L/// i: %d | j: %d | al[i][j]: %f | sumL: %f | al[j][j]: %f | sumD: %f\n", i, j, al[i][j], sumL, au[j][j], sumD);
//
//      }
//
//   }
//}
//
//void matrix::calcLUr() {
//   //real sumD[4] = { 0, 1.5, 0, 0.6 };
//   //real sumD[6] = { 0, 10, 33, 45, 31.25, 42 };
//   //real a = -(5.0 / 4 - 1.0);
//   //real b = -(14.0 / 45 - 1.0 / 3);
//   //real c = -(37.0 / 3360 - 1.0 / 5);
//   //real sumD[4] = { 0, a, b, c };
//
//   for (int j = 0; j < n; j++) {
//      //au[i][j] = A[i][j];
//      real sumU = 0;
//      real sumL = 0;
//      real sumD = 0;
//      for (int i = 0; i < j; i++) {
//         //if (j > m && i + m - j < i - m || i > m && j + m - i < j - m) continue;
//         for (int k = 0; k < i; k++) {
//            //au[i][j] -= al[i][k] * au[k][j];
//            sumU += al[i][k + m - i] * au[j][k + m - j];
//            au[j][i + m - j] -= al[i][k + m - i] * au[j][k + m - j];
//            //printf("U/// k: %d i: %d j: %d | i + m - j: %d | au[j][i + m - j]: %f | sumU: %f | al_k: %f | au_k: %f\n",
//               //k, i, j, i + m - j, au[j][i + m - j], sumU, al[i][k + m - i], au[j][k + m - j]);
//            printf("U/// k: %d i: %d j: %d | i + m - j: %d | au[j][i + m - j]: %s | sumU: %s | al_k: %s | au_k: %s  ",
//               k, i, j, i + m - j, check(au[j][i + m - j]).c_str(), check(sumU).c_str(), check(al[i][k + m - i]).c_str(), check(au[j][k + m - j]).c_str());
//            printf("U//// k + m - i: %d k + m - j: %d\n", k + m - i, k + m - j);
//
//            //cout << "k, i, j, k + m - i, k + m - j, i + m - j" << k << i << j << k + m - i << "sumU: " << sumU << "al_k u au_k: " <<
//               //al[i][k + m - i] << " " << au[j][k + m - j] << endl;
//         }
//
//
//      }
//
//      for (int i = j; i < n; i++) {
//         //real sumU = 0;
//         //real sumL = 0;
//         //real sumD = 0;
//
//         //al[i][j] = A[i][j];
//         //if (i > m && j < i - m || j > m && i < j - m) continue;
//         //if (j > i) continue;
//
//         for (int k = 0; k < j; k++) {
//            //al[i][j] -= al[i][k] * au[k][j];
//            //printf("L/// k: %d | i: %d | j: %d | j + m - i: %d | al[i][j + m - i]: %.7f | sumU: %f | al_k: %f | al_k: %f\n",
//               //k, i, j, j + m - i, al[i][j + m - i], al[i][k + m - i], au[j][k + m - j], sumU);
//            sumL += al[i][k + m - i] * au[j][k + m - j];
//            al[i][j + m - i] -= al[i][k + m - i] * au[j][k + m - j];
//            if (i == j) sumD += al[i][k + m - i] * au[j][k + m - j];
//            //cout << "k, i, j" << k << i << j << "sumL: " << sumL << "al_k u au_k: " << al[i][k + m - i] << " " << au[j][k + m - j] << endl;
//
//            //printf("L/// k: %d i: %d j: %d | j + m - i: %d | al[i][j + m - i]: %.7f | sumL: %f | al_k: %f | au_k: %f\n",
//              // k, i, j, j + m - i, al[i][j + m - i], sumL, al[i][k + m - i], au[j][k + m - j]);
//            printf("L/// k: %d i: %d j: %d | j + m - i: %d | al[i][j + m - i]: %s | sumL: %s | al_k: %s | au_k: %s  ",
//               k, i, j, j + m - i, check(al[i][j + m - i]).c_str(), check(sumL).c_str(), check(al[i][k + m - i]).c_str(), check(au[j][k + m - j]).c_str());
//
//
//            printf("L//// k + m - i: %d k + m - j: %d\n", k + m - i, k + m - j);
//         }
//         al[i][j + m - i] /= di[j];
//
//         if (i == j) di[j] = di[j] - sumD;
//      }
//      //di[j] = di[j] - sumD;
//   }
//}
/*
real matrix::check(real a) {
   if (fabs(a) > 1000) {
      a = char(a);
   }
   return a;
}*/


void matrix::calcLUkonec()
{
   for (int i = 0; i < n; i++)
   {
      for (int j = 0; j < n; j++)
      {
         // Расчёт индексов ленточной матрицы
         //printf("%f | ", A[i][j]);

         if (j > i) {
            int il = j, jl = m + i - j + 0;
            if (il < 0 || jl < 0) continue;
            au[il][jl] = mat[i][j];
         }
         else if (i > j)
         {
            int il = i, jl = m - i + j + 0;
            if (il < 0 || jl < 0) continue;
            al[il][jl] = mat[i][j];
         }
         else // i=j
         {
            di[i] = mat[i][i];
         }
         //printf("%d %d  ", i, j);
      }
      //printf("\n");
   }


   for (int ij = 0; ij < n - 1; ij++)
   {
      int ijl = ij;
      int ilu = ij + 1;

      for (int i = ij + 1; i < n; i++)
      {
         int il = i;
         int jl = m - i + ij + 0;
         if (il < 0 || jl < 0) continue;

         realsum sum = 0.0;
         for (int k = 0; k < ij; k++)
         {

            int kll = m - i + k + 0;
            int klu = ij;
            if (kll < 0 || klu < 0) continue;

            int jlu = m + k - ij;
            if (jlu < 0) continue;
            sum += al[il][kll] * au[klu][jlu];

         }
         al[il][jl] = (al[il][jl] - sum) / di[ij]; // au[ijl][ijl];
      }



      int il = ilu;
      for (int j = il; j < n; j++)
      {
         int jl = m + il - j;
         if (il < 0 || jl < 0) continue;

         realsum sum = 0.0;
         for (int k = 0; k < ilu; k++)
         {
            int kll = m + k - ilu + 0;
            int klu = j;
            if (kll < 0 || klu < 0) continue;

            int jlu = m + k - j;
            if (jlu < 0) continue;
            sum += al[il][kll] * au[klu][jlu];
         }

         if (jl == m) {
            di[il] = (di[il] - sum);
         }
         else {
            int klu = j;
            au[klu][jl] = (au[klu][jl] - sum);
         }
      }
   }
}
string matrix::check(real a) {
   char buffer[50];

   if (abs(a) < 100.0) {
      snprintf(buffer, sizeof(buffer), "%f", a);
      return std::string(buffer);
   }
   else return "--------";
   return buffer;
}


void matrix::calcY(real** al, real* b, real* y, int n)
{
   for (int i = 0; i < n; i++)
   {
      realsum sum = 0.0;
      for (int j = 0; j < i; j++) {
         if (j + m - i < 0) continue;
         sum += al[i][j + m - i] * y[j];
         //printf("\ni: %d | j + m - i: %d | %f | %f\n", i, j + m - i, al[i][j + m - i], y[i]);
      }
      y[i] = (b[i] - sum);
      printf(realout "\n", y[i]);
   }
}

void matrix::calcX(real** au, real* y, real* x, int n)
{
   for (int i = n - 1; i >= 0; i--)
   {

      realsum sum = 0.0;
      for (int j = i + 1; j < n; j++) {
         if (i + m - j < 0) continue;
         sum += au[j][i + m - j] * x[j];
      }
      x[i] = (y[i] - sum) / di[i];
      //printf("\n" realout, x[i]);
   }
   for (int i = 0; i < n; i++)
      printf(realout "\n", x[i]);
}

/*
void matrix::calcY(real** al, real* b, real* y, int n) {
   for (int i = 0; i < n; i++) {
      real s = 0;
      for (int j = i - m, j_band = 0, ij = i * m; j_band < m; j_band++, j++, ij++)
         if (j >= 0)
            s += al[i][j] * y[j];
      y[i] = b[i] - s;
      printf("\n%lf", y[i]);
   }
}*/
/*
void matrix::calcX(real** au, real* y, real* x, int n) {
   for (int i = n - 1; i >= 0; i--) {
      x[i] = y[i] / di[i];
      for (int col = 0, k = i - 1, ij = (i + 1) * w2 - 1; col < w2; col++, k--, ij--)
         y[k] -= x[i] * al[ij];
   }
}*/


void matrix::createGilbert(real** g, real* D, int n, int m)
{
   for (int i = 0; i < n; i++)
   {
      for (int j = i - m, j1 = 0; j1 < m; j++, j1++)
      {
         if (j < 0) g[i][j1] = 0;
         else g[i][j1] = 1.0 / (i + j1 - 1);
      }
      /*for (int k = i + m, j2 = 0; j2 < m; j2++, k++)
      {
         if (k > m) g[i][j2] = 0;
         else g[i][j2] = 1.0 / (i + j2 - 1);
      }*/
      D[i] = 1.0 / (i + i - 1);
   }
}

void matrix::allocateMemory() {
   al = new real * [n];
   for (int i = 0; i < n; i++) {
      al[i] = new real[m]{ 0 };
      //for (int j = 0; j < m; j++) {
         //al[i][j] = 0.0;
         //printf("%f ", al[i][j]);
      //}
      //printf("\n");
   }
   au = new real * [n];
   for (int i = 0; i < n; i++) {
      au[i] = new real[m]{ 0 };
      //for (int j = 0; j < m; j++) {
         //au[i][j] = 0.0;
         //printf("%f ", au[i][j]);
   //}
   //printf("\n");
   }
   mat = new real * [n];
   for (int i = 0; i < n; ++i) {
      mat[i] = new real[n];
   }
   di = new real[n];
   b = new real[n];
   x = new real[n]{ 0 };
   y = new real[n]{ 0 };
   //x = b;
   //y = b;
}



void matrix::gauss()
{
   std::vector <std::vector <real>> matrix;
   std::vector <real> b_vec;
   matrix.resize(n);
   b_vec.resize(n);



   for (int i = 0; i < n; i++)
   {
      for (int j = 0; j < n; j++)
      {
         // Расчёт индексов ленточной матрицы
         //printf("%f | ", A[i][j]);

         if (j > i) {
            int il = j, jl = m + i - j + 0;
            if (il < 0 || jl < 0) continue;
            au[il][jl] = mat[i][j];
         }
         else if (i > j)
         {
            int il = i, jl = m - i + j + 0;
            if (il < 0 || jl < 0) continue;
            al[il][jl] = mat[i][j];
         }
         else // i=j
         {
            di[i] = mat[i][i];
         }
         //printf("%d %d  ", i, j);
      }
      //printf("\n");
   }




   for (int i = 0; i < n; i++) {
      b_vec[i] = b[i];
      matrix[i].resize(n);
      for (int j = 0; j < n; j++) {
         if (j + m - i < 0 || i + m - j < 0)
            matrix[i][j] = 0.0;
         else if (j > i)  matrix[i][j] = au[j][i + m - j];
         else  matrix[i][j] = al[i][j + m - i];
         matrix[i][i] = di[i];
         printf("%f   ", matrix[i][j]);
      }
      printf("\n");
   }
   /*
   for (int i = 0; i < n; i++) {
      b_vec[i] = b[i];
      matrix[i].resize(n);
      matrix[i][i] = di[i];
      for (int j = i - m, j_band = 0; j_band < m; j_band++, j++) {
         if (j < 0) continue;
         matrix[i][j] = al[i][j_band];
         matrix[j][i] = au[i][j_band];
      }
   }*/

   for (int i = 0; i < n; i++) {
      int leadIndex = i;
      real lead = matrix[i][i];
      for (int k = i + 1; k < n; k++)
         if (abs(matrix[k][i]) > abs(lead))
         {
            lead = matrix[k][i];
            leadIndex = k;
         }
      matrix[i].swap(matrix[leadIndex]);
      std::swap(b_vec[i], b_vec[leadIndex]);
      for (int k = i + 1; k < n; k++) {
         real m_i = matrix[k][i] / matrix[i][i];
         for (int j = i; j < n; j++)
            matrix[k][j] -= m_i * matrix[i][j];
         b_vec[k] -= m_i * b_vec[i];
      }
   }

   for (int i = n - 1; i >= 0; i--) {
      real sum = 0;
      for (int j = n - 1; j > i; j--)
         sum += matrix[i][j] * x[j];
      x[i] = (b_vec[i] - sum) / matrix[i][i];
      //printf("\n%.12f", x[i]);
   }


   for (int i = 0; i < n; i++)
      printf("\n%.12f", x[i]);
}

/*
void comp()
{
   std::cout << "Hellow World!\n";

   int n = 4;
   real A[4][4] = {
   { 1, 7, 6, 4 },
   { 5, 8, 2, 3 },
   { 9, 3, 4, 1 },
   { 8, 2, 7, 6 }
   };
   real B[4] = { 11, 7, 8, 1 };

   real X[4] = { 0 };
   real U[4][4] = { 0 };

   // Прямой ход алгоритма
   for (int k = 0; k < n - 1; k++)
   {
      //int i = k;
      real amax = A[k][k];
      int jmax = k;
      // Поиск главного элемента
      for (int j = k + 1; j < n; j++)
      {
         if (abs(A[k][j]) > abs(A[k][jmax])) { jmax = j; };
      }

      real Amax = A[k][jmax];
      for (int j = k; j < n; j++)
      {
         A[k][j] /= Amax;
      }
      B[k] /= Amax;

      // Перестановка
      int j = jmax;
      for (int ij = k; ij < 1; ij++)
      {
         // Обмен столбцов
         if (ij != j)
         {
            real a = A[ij][k];
            A[ij][k] = A[ij][j];
            A[ij][j] = a;
         }
      }
      // Обмен строк в правой части
      real b = B[k];
      B[k] = B[j];
      B[j] = b;

      // Вычитание
      for (int i = k + 1; i < n; i++) {
         real Aik = A[i][k];
         for (int j = k; j < n; j++) {
            A[i][j] -= Aik * A[k][j] / A[k][k];
         }
         B[i] -= Aik * B[k] / A[k][k];
      }
   }
   // Печать матрицы
   for (int i = 0; i < n; i++)
   {
      for (int j = 0; j < n; j++) {
         //A[i][j] = 1.0;
         printf("%f  ", A[i][j]);
      }
      printf("   %f", B[i]);
      printf("\n");
   }
   printf("-------------------BBB-------------------\n");

   int k = 0;
   X[n - 1] = B[n - 1] / A[n - 1][n - 1];
   for (int i = n - 2; i > -1; i--) {
      real sum = 0;
      for (int j = i + 1; j < n; j++) {
         sum += X[j] * A[i][j];
      }
      X[i] = (B[i] - sum) / A[i][i];
   }


   for (int i = 0; i < n; i++)
   {
      real sum = 0.0;
      for (int j = 0; j < n; j++) {
         sum += A[i][j] * X[j];
      }
   }

}


void comppp()
{
   std::cout << "Hellow World!\n";

   int nn = 4;
   real A[4][4] = {
   { 1, 7, 6, 4 },
   { 5, 8, 2, 3 },
   { 9, 3, 4, 1 },
   { 8, 2, 7, 6 }
   };
   real B[4] = { 11, 7, 8, 1 };

   real X[4] = { 0 };
   real U[4][4] = { 0 };

   //U[4][4] = A[4][4];

   // Печать матрицы
   for (int i = 0; i < nn; i++)
   {
      for (int j = 0; j < nn; j++) {
         //A[i][j] = 1.0;
         printf("%f  ", A[i][j]);
      }
      printf("   %f", B[i]);
      printf("\n");
   }
   printf("--------------------------------------\n");


   // Прямой ход алгоритма
   for (int k = 0; k < nn - 1; k++)
   {
      printf("k  %d   k\n", k);
      //int i = k;
      //for (int i = k; i < 1; i++)
      {
         real amax = A[k][k];
         int jmax = k;
         // Поиск главного элемента
         for (int j = k + 1; j < nn; j++)
         {
            if (abs(A[k][j]) > abs(A[k][jmax])) { jmax = j; };
            //printf("%f  ", A[i][j]);
            //printf("%d %d  ", i, j);
            printf("[  %f  %d  :max]", A[k][jmax], jmax);
         }
         printf("\n");

         real Amax = A[k][jmax];
         for (int j = k; j < nn; j++)
         {
            A[k][j] /= Amax;
            //A[i][j] /= A[i][jmax];
            //printf("%f  ", A[i][j]);
            //printf("%d %d  ", i, j);
            printf("[M  %f  %d  M]", A[k][j], j);
         }
         B[k] /= Amax;
         printf("\n");

         // Перестановка
         int j = jmax;
         for (int ij = k; ij < 1; ij++)
         {
            // Обмен столбцов
            if (ij != j)
            {
               real a = A[ij][k];
               A[ij][k] = A[ij][j];
               A[ij][j] = a;
               //A[i][j] /= A[i][jmax];
               //printf("%f  ", A[i][j]);
               //printf("%d %d  ", i, j);
               printf("[R  %f  %d  R]", A[ij][j], ij);
            }
         }
         // Обмен строк в правой части
         real b = B[k];
         B[k] = B[j];
         B[j] = b;

         // Вычитание
         for (int i = k + 1; i < nn; i++) {
            real Aik = A[i][k];
            for (int j = k; j < nn; j++) {
               A[i][j] -= Aik * A[k][j] / A[k][k];
               //A[i][j] -= A[i][k] * A[k][j] / A[k][k];
               //printf(" %d %d %d %f %f %f %f\n", k, i,j, A[i][k], A[k][j], A[k][k], Aik);
            }
            //B[i] -= B[k];
            B[i] -= Aik * B[k] / A[k][k];
            printf(" %d %d %f %f %f\n", k, i, B[i], B[k], Aik);
            //B[i] -= A[i][k] * B[k];
         }

      }
   }
   printf("\n");
   printf("--------------------------------------\n");

   // Печать матрицы
   for (int i = 0; i < nn; i++)
   {
      for (int j = 0; j < nn; j++) {
         //A[i][j] = 1.0;
         printf("%f  ", A[i][j]);
      }
      printf("   %f", B[i]);
      printf("\n");
   }
   printf("-------------------BBB-------------------\n");
   //return;

   // Обратный ход алгоритма
   printf("--------------------Обратный ход алгоритма | Reverce steps------------------\n");
   int k = 0;
   X[nn - 1] = B[nn - 1] / A[nn - 1][nn - 1];
   for (int i = nn - 2; i > -1; i--) {
      //printf("i: %d  \n", i);
      real sum = 0;
      //for (int j = nn-1; j > i; j--) {
      for (int j = i + 1; j < nn; j++) {
         printf(" %d  %d  |  ", i, j);
         sum += X[j] * A[i][j];
         printf(" %d  %d  %f  |  ", i, j, sum);
      }
      X[i] = (B[i] - sum) / A[i][i];
      printf("\n");
   }
   for (int i = 0; i < nn; i++) {
      printf(" %d  %f  \n", i, X[i]);
   }
   printf("--------------------------------------\n");

   // Проверка - нахождение В, через А и х
   printf("--------------------Проверка - нахождение В, через А и х------------------\n");
   for (int i = 0; i < nn; i++)
   {
      real sum = 0.0;
      for (int j = 0; j < nn; j++) {
         sum += A[i][j] * X[j];
         //printf(" |  %f  | ", A[i][j]);
      }
      printf(" %f  %f", sum, B[i]);
      printf("\n");
   }
   printf("--------------------------------------\n");


}
*/





int main() {
   FILE* inmat, * invec;

   matrix matrix{};
   int num;
   //cin >> num;
   printf("1: N4, 2: N5, 3: N6\n");
   //scanf_s("%d", &num);
   num = 1;
   switch (num)
      case 1:
         for (matrix.k = 5; matrix.k < 7; matrix.k++)
         {
            fopen_s(&inmat, "inmat.txt", "r");
            fopen_s(&invec, "invec.txt", "r");
            //LU4();
            //exit(0);
            printf("\n\n\n/////////////K = %d", matrix.k);
            matrix.input(inmat, invec);
            //matrix.createGilbert(matrix.al, matrix.di, matrix.n, matrix.m);
            //matrix.createGilbert(matrix.au, matrix.di, matrix.n, matrix.m);
            matrix.calcLUkonec();
            /*for (int i = 0; i < matrix.n; i++) {
               for (int j = 0; j < matrix.m; j++) {

                  printf(realout, matrix.al[i][j]);
               }
               printf("\n");
            }
            printf("\n");

            for (int i = 0; i < matrix.n; i++) {
               for (int j = 0; j < matrix.m; j++) {
                  printf(realout, matrix.au[i][j]);
               }
               printf("\n");
            }
            printf("\n");*/

            printf("///D:\n");
            for (int i = 0; i < matrix.n; i++)
               printf(realout "\n", matrix.di[i]);
            printf("\n///B:\n");

            for (int i = 0; i < matrix.n; i++)
               printf(realout "\n", matrix.b[i]);


            //matrix.gauss();
            printf("\n///Y:\n");

            matrix.calcY(matrix.al, matrix.b, matrix.y, matrix.n);

            printf("\n///X:\n");

            matrix.calcX(matrix.au, matrix.y, matrix.x, matrix.n);

         }
}