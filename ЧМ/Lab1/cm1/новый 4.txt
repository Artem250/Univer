void Matrix::LUDecomposition()
{
    for (int i = 0; i < n; i++) 
    {
        real sumD = 0;

        for (int j = i - m, j_band=0; j < i; j++, j_band++) {
            if (j < 0) continue;
			real sumL = 0, sumU = 0;
            for (int k = j_band; k <= j; k++)
            {
                if (k - j < 0) continue; 
				if (i - k + 1 > m) continue;
                sumL += al[k-j][i-j_band+1] * au[k-i+2][j]; 
                sumU += al[k-i+2][j] * au[k-j][i-j_band+1]; 
			}

            al[j_band][i] = al[j_band][i] - sumL; 
            au[j_band][i] = (au[j_band][i] - sumU) / di[i-1];
            
            sumD += al[j_band][i] * au[j_band][i]; 
		}
        di[i] -= sumD;
    }
	
	
	
	
    cout << "al:" << endl;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << al[i][j] << "\t";
        }
        cout << endl;
    }
    cout << "au:" << endl;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << au[i][j] << "\t";
        }
        cout << endl;
    }
    cout << "di:" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << di[i] << "\t";
    }
}
